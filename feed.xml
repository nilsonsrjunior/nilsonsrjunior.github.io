<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nilson Junior</title>
    <description>Desenvolvimento web, .net and more</description>
    <link>http://nilsonsrjunior.net/</link>
    <atom:link href="http://nilsonsrjunior.net/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Fri, 11 Dec 2015 10:23:41 -0200</pubDate>
    <lastBuildDate>Fri, 11 Dec 2015 10:23:41 -0200</lastBuildDate>
    <generator>Jekyll v2.3.0</generator>
    
      <item>
        <title>ASP.NET Web Api 2 - Parte 1</title>
        <description>&lt;p&gt;Antes de entendermos o que é um serviço &lt;strong&gt;REST&lt;/strong&gt; e como ele funciona, temos que saber porque ele foi criado e o que havia antes…&lt;/p&gt;

&lt;h1 id=&quot;web-services---o-comeo&quot;&gt;Web Services - O Começo&lt;/h1&gt;

&lt;p&gt;Os chamados web services surgiram para permitir e facilitar a comunicação entre diferentes aplicações que podem estar rodando em diferentes plataformas.&lt;/p&gt;

&lt;p&gt;Quando surgiram, foi especificado um protocolo em que as mensagens deveriam ser encapsuladas e uma linguagem em que deveriam ser descritas as interfaces dos serviços.&lt;/p&gt;

&lt;p&gt;Este procolo de que estamos falando é o &lt;strong&gt;SOAP (Simple Object Access Protocol)&lt;/strong&gt;, e a linguagem em que devem ser descritas as interfaces é chamada de &lt;strong&gt;WSDL (Web Services Description Language)&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Portanto, vamos imaginar que temos que escrever uma carta. Agora, para facilitar a vida do leitor vamos colocar na primeira página uma especificação das coisas que o leitor vai encontrar no conteúdo da carta.&lt;/p&gt;

&lt;p&gt;Por ex.:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Senha da minha conta do banco;&lt;/li&gt;
  &lt;li&gt;Receita de bolo de cenoura;&lt;/li&gt;
  &lt;li&gt;Como fazer flexões embaixo d’agua;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Depois de descritas as coisas que o leitor irá encontrar na nossa carta, podemos escrever o conteúdo nas próximas páginas.&lt;/p&gt;

&lt;p&gt;Agora trazendo para os web services, imagine que a especificação do conteúdo da carta é o WSDL e o conteúdo é a mensagem.&lt;/p&gt;

&lt;p&gt;E o SOAP ? Não podemos mandar esta carta para alguém se não a colocarmos em um envelope para que ninguém veja logo de cara o que está escrito certo ?&lt;/p&gt;

&lt;p&gt;Já entendeu né ? O SOAP é o nosso envelope. E o carteiro ? ninguém perguntou do carteiro… foca no exemplo &lt;strike&gt;obg&lt;/strike&gt;.&lt;/p&gt;

&lt;p&gt;Tá. Mas porque estamos falando de Web Services, SOAP, WSDL ? &lt;strike&gt;CARMA TREM!&lt;/strike&gt;&lt;/p&gt;

&lt;p&gt;Então, tudo isso era lindo, mas tinha um problema: &lt;a href=&quot;http://nilsonsrjunior.net/tag/performance/&quot;&gt;PERFORMANCE&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Pois é… aí que os serviços REST entraram com os dois pés no peito.&lt;/p&gt;

&lt;h1 id=&quot;rest-representation-state-transfer&quot;&gt;REST (Representation State Transfer)&lt;/h1&gt;

&lt;p&gt;A arquitetura REST elimina toda a complexidade de uma interface de serviço WSDL, protocolo para as mensagens, focando apenas nos &lt;strong&gt;RECURSOS&lt;/strong&gt;. Ou seja, temos um recurso e diferentes estados.&lt;/p&gt;

&lt;p&gt;Então, na prática, vamos supor que temos a seguinte URI: &lt;a href=&quot;http://abobrinhasvoadoras.com.br/tipo&quot;&gt;http://abobrinhasvoadoras.com.br/tipo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Tendo em mente esta URI, podemos dizer que o nosso recurso nesse caso é o &lt;strong&gt;tipo&lt;/strong&gt; da abobrinha.&lt;/p&gt;

&lt;p&gt;Para o recurso &lt;strong&gt;tipo&lt;/strong&gt; podemos executar várias ações sobre ele, ao todo temos oito métodos fornecidos pelo protocolo HTTP, mas os principais são:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;POST - Cria;&lt;/li&gt;
  &lt;li&gt;PUT - Atualiza;&lt;/li&gt;
  &lt;li&gt;GET - Busca;&lt;/li&gt;
  &lt;li&gt;DELETE - Apaga;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Quando estamos trabalhando com os recursos, temos que saber em que formato estes recursos estão para que possamos utilizá-los. Quem define isso é o &lt;strong&gt;&lt;em&gt;Content-Type&lt;/em&gt;&lt;/strong&gt; que é enviado no cabeçalho da requisição. Os formatos mais utilizados são XML e JSON.&lt;/p&gt;

&lt;p&gt;A arquitetura REST também segue alguns outros princípios, como:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Cliente-Servidor sem estado&lt;/strong&gt;: cada mensagem HTTP deve ser auto-suficiente, ou seja, nada de ficar dependendo de um estado para poder responder uma requisição ou ficar reaproveitando recursos pela metade no meio do caminho. Existem práticas para manter informação como utilização de &lt;strong&gt;[cookies]&lt;/strong&gt;(https://www.google.com.br/webhp?sourceid=chrome-instant&amp;amp;ion=1&amp;amp;espv=2&amp;amp;ie=UTF-8#q=cookies+http) que são permitidas pela arquitetura REST, mas isso é conversa para outro post…;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Cada recurso é unicamente identificado&lt;/strong&gt; e direcionado através da &lt;strong&gt;sua URI&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Para vermos a coisa funcionando na prática, se você não possuir uma ferramenta para fazer requisições como &lt;a href=&quot;http://www.telerik.com/fiddler&quot;&gt;Fiddler&lt;/a&gt; ou &lt;a href=&quot;https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop&quot;&gt;Postman&lt;/a&gt;, use este &lt;a href=&quot;https://resttesttest.com/&quot;&gt;site&lt;/a&gt; e faça uma requisição com o método &lt;code&gt;GET&lt;/code&gt; e o &lt;code&gt;content-type: application/json&lt;/code&gt; para a uri &lt;a href=&quot;https://httpbin.org/ip&quot;&gt;https://httpbin.org/ip&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Você terá este resultado, no formato JSON:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &quot;origin&quot;: &quot;189.113.145.110&quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Viu só ? não é difícil entender como serviços REST funcionam..&lt;/p&gt;

&lt;p&gt;No próximo episódio desta novela: &lt;strong&gt;&lt;em&gt;Começando com ASP.NET Web Api 2&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Este post não teve código fonte próprio para eu disponibilizar, mas dá uma passada no meu  &lt;a href=&quot;https://github.com/nilsonsrjunior&quot;&gt;github&lt;/a&gt;, tem projetos legais lá.&lt;/p&gt;

&lt;p&gt;Faça seu comentário, um grande abraço, e até breve !!!&lt;/p&gt;

&lt;strike&gt;To be continued...&lt;/strike&gt;
</description>
        <pubDate>Mon, 07 Dec 2015 17:00:00 -0200</pubDate>
        <link>http://nilsonsrjunior.net/aspnet-web-api-2-parte-1</link>
        <guid isPermaLink="true">http://nilsonsrjunior.net/aspnet-web-api-2-parte-1</guid>
        
        <category>web-api</category>
        
        
      </item>
    
      <item>
        <title>Otimizando o Back-End com Cache de Objetos</title>
        <description>&lt;p&gt;Antes de começarmos a conversa, me responsa duas coisas..&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Você se preocupa com a performance da sua aplicação?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Você precisa otimizar uma rotina para ganhar mais performance ?&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bom, se você respondeu sim para qualquer uma das perguntas acima, vou te ensinar uma técnica &lt;strike&gt;top&lt;/strike&gt; excelente para obter um ganho de performance na sua aplicação: &lt;strong&gt;cacheando objetos&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Esta técnica nada mais é do que armazenar objetos em memória.&lt;/p&gt;

&lt;p&gt;Imagine que na sua tela você carrega uma lista com todas as cidades do Brasil. Vamos fingir que você buscou essa lista no seu banco de dados, ok ?&lt;/p&gt;

&lt;p&gt;Se você utilizar o cache de objetos, você pode recuperar essa lista somente uma vez do banco de dados, armazená-la no cache, e toda vez que você precisar, é só pegar de lá, ao invés de ter que abrir uma nova conexão com o banco de dados. Bem melhor né ?&lt;/p&gt;

&lt;p&gt;Existem váááárias maneiras e bibliotecas para se implementar o uso de cache, mas eu vou falar da biblioteca System.Runtime.Caching que está presente a partir do .NET framework 4.0.&lt;/p&gt;

&lt;p&gt;Se você estiver usando uma versão do .NET framework inferior à 4.0, provavelmente terá que usar a biblioteca System.Web.Caching, que era sua antecessora…&lt;/p&gt;

&lt;strike&gt;CODE!!!! THAT IS WHAT I WANT!&lt;/strike&gt;

&lt;p&gt;Vamos à implementação..&lt;/p&gt;

&lt;p&gt;Ah, só uma coisinha… para esse exemplo eu vou criar uma Web Application MVC, mas se você estiver usando um console, windows forms or wathever, você pode implementar da mesma forma, tranquilo ?&lt;/p&gt;

&lt;p&gt;Então vai la: File -&amp;gt; New -&amp;gt; Project -&amp;gt; VisualC#/Web/ASP.NET Web Application -&amp;gt; MVC.&lt;/p&gt;

&lt;p&gt;Eu dei o nome da aplicação de UsandoCacheDeObjetos, depois você poderá baixá-la no meu &lt;a href=&quot;http://github.com/nilsonsrjunior&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Vou adicionar um projeto com o nome UsandoCacheDeObjetos.Cache, para adicionarmos nossa referência da biblioteca do cache, mas isso é só para organizar melhor ok?&lt;/p&gt;

&lt;p&gt;Neste pequeno projeto, vamos criar uma classe Cache com o seguinte código:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class Cache
{
        static readonly ObjectCache oCache = MemoryCache.Default;

        /// &amp;lt;summary&amp;gt;
        /// Recupera o item cacheado
        /// &amp;lt;/summary&amp;gt;
        /// &amp;lt;typeparam name=&quot;T&quot;&amp;gt;Tipo do item cacheado&amp;lt;/typeparam&amp;gt;
        /// &amp;lt;param name=&quot;key&quot;&amp;gt;Nome do item cacheado&amp;lt;/param&amp;gt;
        /// &amp;lt;returns&amp;gt;Tipo do item cacheado&amp;lt;/returns&amp;gt;
        public static T Get&amp;lt;T&amp;gt;(string key) where T : class
        {
            try
            {
                return (T)oCache[key];
            }
            catch
            {
                return null;
            }
        }

        /// &amp;lt;summary&amp;gt;
        /// Insere o valor em um cache
        /// &amp;lt;/summary&amp;gt;
        /// &amp;lt;typeparam name=&quot;T&quot;&amp;gt;Tipo do item cacheado&amp;lt;/typeparam&amp;gt;
        /// &amp;lt;param name=&quot;objectToCache&quot;&amp;gt;Item a ser cacheado&amp;lt;/param&amp;gt;
        /// &amp;lt;param name=&quot;key&quot;&amp;gt;Nome do item&amp;lt;/param&amp;gt;
        public static void Add&amp;lt;T&amp;gt;(T objectToCache, string key) where T : class
        {
            oCache.Add(key, objectToCache, DateTime.Now.AddDays(30));
        }

        /// &amp;lt;summary&amp;gt;
        /// Remove item do cache
        /// &amp;lt;/summary&amp;gt;
        /// &amp;lt;param name=&quot;key&quot;&amp;gt;Nome do item cacheado&amp;lt;/param&amp;gt;
        public static void Clear(string key)
        {
            oCache.Remove(key);
        }

        /// &amp;lt;summary&amp;gt;
        /// Verifica se o item existe no cache
        /// &amp;lt;/summary&amp;gt;
        /// &amp;lt;param name=&quot;key&quot;&amp;gt;Nome do item cacheado&amp;lt;/param&amp;gt;
        /// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;
        public static bool Exists(string key)
        {
            return oCache.Get(key) != null;
        }

        /// &amp;lt;summary&amp;gt;
        /// Retorna todos os itens cacheados como uma lista pela sua respectiva chave
        /// &amp;lt;/summary&amp;gt;
        /// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;
        public static List&amp;lt;string&amp;gt; GetAll()
        {
            return oCache.Select(keyValuePair =&amp;gt; keyValuePair.Key).ToList();
        }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Para instanciarmos o cache (da classe &lt;code&gt;System.Runtime.Caching.ObjectCache&lt;/code&gt;), precisamos apontar onde esta instância será armazenada, no nosso exemplo, utilizamos a opção Default. Lembrando que podemos ter múltiplas instâncias de cache em uma mesma aplicação.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Importante: No nosso exemplo, estamos utilizando uma Web Application, sendo assim, o cache será, por padrão, armazenado no Pool de Aplicativo da sua aplicação no seu IIS. Então tenha em mente que se o pool for reciclado, bye bye cache.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Continuando !!! Na HomeController, eu substituí todo o código antigo gerado, por este:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class HomeController : Controller
{
        private IEnumerable&amp;lt;Cliente&amp;gt; clientes;
        public IEnumerable&amp;lt;Cliente&amp;gt; Clientes
        {
            get
            {
                clientes = Cache.Cache.Get&amp;lt;IEnumerable&amp;lt;Cliente&amp;gt;&amp;gt;(&quot;Clientes&quot;);
                if (clientes == null)
                {
                    clientes = RetornaClientes();
                    Cache.Cache.Add(clientes, &quot;Clientes&quot;);
                }
                return clientes;
            }
            set { clientes = value; }
        }

        public ActionResult Index()
        {
            Cache.Cache.Clear(&quot;Clientes&quot;);

            var timer = new Stopwatch();

            timer.Start();
            //Acessando a Propriedade
            var testeSemCache = Clientes;
            timer.Stop();

            var tempoSemCache = timer.Elapsed;

            timer.Reset();

            timer.Start();
            //Acessando a Propriedade
            var testeComCache = Clientes;
            timer.Stop();

            var tempoComCache = timer.Elapsed;

            ViewBag.SemCache = tempoSemCache;
            ViewBag.ComCache = tempoComCache;

            return View(Clientes);
        }

        private static IEnumerable&amp;lt;Cliente&amp;gt; RetornaClientes()
        {
            yield return new Cliente { Nome = &quot;Zé das couve&quot;, Email = &quot;zedascouve@ze.com.br&quot;};
            yield return new Cliente { Nome = &quot;Zé&quot;, Email = &quot;ze@ze.com.br&quot; };
            yield return new Cliente { Nome = &quot;Teste&quot;, Email = &quot;teste@teste.com.br&quot; };
            yield return new Cliente { Nome = &quot;Sem ideia&quot;, Email = &quot;sem@ideia.com.br&quot; };
            yield return new Cliente { Nome = &quot;Sem criatividade&quot;, Email = &quot;sem@criatividade.com.br&quot; };
            yield return new Cliente { Nome = &quot;Sem paciencia&quot;, Email = &quot;sem@paciencia.com.br&quot; };
        }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Vamos lá… line by line… na nossa &lt;code&gt;AccountController&lt;/code&gt;, notem que eu criei uma propriedade Clientes. No &lt;code&gt;get&lt;/code&gt; dessa propriedade eu a pego do cache, se ela for nula, ou seja, ainda não existir, eu retorno a lista de clientes do método &lt;code&gt;RetornaClientes&lt;/code&gt;, atribuo no cache e retorno.&lt;/p&gt;

&lt;p&gt;No método &lt;code&gt;RetornaClientes&lt;/code&gt;, eu estou preenchendo a lista de Cliente com &lt;strong&gt;yield&lt;/strong&gt;, se você não conhece este recurso maravilhoso que aumenta sua produtividade, leia este &lt;a href=&quot;http://nilsonsrjunior.net/yield-e-de-comer/&quot;&gt;post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Vamos imaginar que o método &lt;code&gt;RetornaClientes&lt;/code&gt; fosse buscar esta lista de clientes no banco de dados (para aumentar o tempo de processamento), da forma que implementamos ele só irá ao banco na primeira vez, e depois preencherá a propriedade com a lista que já está no cache.&lt;/p&gt;

&lt;p&gt;Wonderful !!! Na nossa action Index, eu criei um &lt;code&gt;Stopwatch&lt;/code&gt; para monitorarmos o tempo de carregamento da propriedade com os clientes e fazermos um comparativo quando retornamos do método, e quando retornamos do cache.&lt;/p&gt;

&lt;p&gt;Já na View &lt;code&gt;Index&lt;/code&gt; da &lt;code&gt;AccountController&lt;/code&gt;, referente à este código, eu substitui o conteúdo original por este:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@model IEnumerable&amp;lt;UsandoCacheDeObjetos.Models.Cliente&amp;gt;

@{
    ViewBag.Title = &quot;Home Page&quot;;
}

&amp;lt;div class=&quot;jumbotron&quot;&amp;gt;
    &amp;lt;h1&amp;gt;Cacheando Objetos&amp;lt;/h1&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;div class=&quot;row&quot;&amp;gt;
    &amp;lt;div class=&quot;col-md-6&quot;&amp;gt;
        &amp;lt;h3&amp;gt;&amp;lt;strong&amp;gt;Tempo Sem Cache: @ViewBag.SemCache&amp;lt;/strong&amp;gt;
        &amp;lt;/h3&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&quot;col-md-6&quot;&amp;gt;
        &amp;lt;h3&amp;gt;&amp;lt;strong&amp;gt;Tempo Com Cache: @ViewBag.ComCache&amp;lt;/strong&amp;gt;
        &amp;lt;/h3&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;br/&amp;gt;

&amp;lt;div class=&quot;row&quot;&amp;gt;    
    &amp;lt;div class=&quot;col-md-12&quot;&amp;gt;
        @foreach (var item in Model)
        {
            &amp;lt;p&amp;gt;
                &amp;lt;strong&amp;gt;Cliente&amp;lt;/strong&amp;gt;: @item.Nome
                &amp;lt;strong&amp;gt;E-mail&amp;lt;/strong&amp;gt;: @item.Email
            &amp;lt;/p&amp;gt;
        }
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;O conteúdo desta view é bem simples, irei mostrar o tempo registrado no &lt;code&gt;Stopwatch&lt;/code&gt; da controller para compararmos o tempo de preenchimento da variável pegando a lista de clientes do método, e do cache. Além disso, apenas listamos os clientes na tela.&lt;/p&gt;

&lt;p&gt;Executando nossa aplicação, o resultado é este:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post/testeperformancecacheobjetos.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Bom, por hoje é só… como de costume, você pode baixar o código fonte deste post &lt;a href=&quot;https://github.com/nilsonsrjunior/blog-projects/tree/master/UsandoCacheDeObjetos&quot;&gt;aqui&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Caso tenha alguma dúvida, por favor, coloque nos comentários.&lt;/p&gt;

&lt;p&gt;Um grande abraço, e até breve !!!&lt;/p&gt;
</description>
        <pubDate>Thu, 03 Dec 2015 20:45:00 -0200</pubDate>
        <link>http://nilsonsrjunior.net/otimizando-o-back-end-com-cache-de-objetos</link>
        <guid isPermaLink="true">http://nilsonsrjunior.net/otimizando-o-back-end-com-cache-de-objetos</guid>
        
        <category>performance</category>
        
        
      </item>
    
      <item>
        <title>Extensions - Aumentando a Produtividade</title>
        <description>&lt;p&gt;Você já se deparou com uma situação em que tem um monte de classes estáticas para colocar seus métodos comuns do projeto e usá-los sempre que precisa ?
E quando você não lembra em que classe está ?&lt;/p&gt;

&lt;p&gt;Ou então a trabalheira de digitar &lt;code&gt;NomeDaClasseEstatica.NomeDoMetodo(Parametro(s));&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Bem improdutivo, não acha ??&lt;/p&gt;

&lt;p&gt;Cara, eu já passei muito por isso. Porém, entretanto, todavia, as &lt;strong&gt;extensions&lt;/strong&gt; podem diminuir esse trauma nas nossas vidas!.&lt;/p&gt;

&lt;p&gt;Presentes no c# desde a versão 3.0, elas são como métodos estáticos, porém são chamados como se fossem métodos de instância normais. Se você ficou confuso &lt;strike&gt;#keepcalmandreaduntiltheend&lt;/strike&gt;, eu vou explicar melhor com exemplos a seguir.&lt;/p&gt;

&lt;p&gt;Para criarmos métodos de extensão, eles precisam respeitar algumas regrinhas:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Estar dentro de uma classe estática;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Ser estático;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Receber como parâmetro o ponteiro da instância “&lt;code&gt;this&lt;/code&gt;”&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sustentadas as opções acima, vamos por a mão na massa.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public static class MetodosDeExtensao
{
    public static string ToTelefoneFormat(this string telefone)
    {
        var ddd = telefone.Substring(0,2);
        var prefixo = telefone.Substring(2,4);
        var sufixo = telefone.Substring(6,4);
        return string.Format(&quot;({0}) {1}-{2}&quot;, ddd, prefixo, sufixo);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No exemplo acima o método “&lt;code&gt;ToTelefoneFormat&lt;/code&gt;” irá receber uma string com um telefone sem formatação e retorná-lo formatado.&lt;/p&gt;

&lt;p&gt;Então para executarmos nosso método de extensão vamos ter o seguinte código:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Program
{
    static void Main(string[] args)
    {
        var telefone = &quot;4334721597&quot;;

        telefone = telefone.ToTelefoneFormat();

        Console.WriteLine(telefone);
        Console.ReadKey();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;E o resultado disso será: “(43) 3472-1597”.&lt;/p&gt;

&lt;p&gt;Mas cadê o parâmetro do método ????&lt;/p&gt;

&lt;p&gt;É aí que o &lt;code&gt;this&lt;/code&gt; entra. Quando você chama o método através da variável telefone, por meio desta palavra reservada, o compilador irá saber que o parâmetro do método deve ser alimentado com o conteúdo de quem o chamou.&lt;/p&gt;

&lt;p&gt;Portanto, uma extension só será possível de ser utilizada e consequentemente visualizada pelo seu intellisense se o tipo de dado que eu estiver usando for o mesmo do parâmetro e retorno da extension.&lt;/p&gt;

&lt;p&gt;Para exemplificar a explicação acima, veja a versão atualizada do código:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public static class MetodosDeExtensao
{
    public static string ToTelefoneFormat(this string telefone)
    {
        var ddd = telefone.Substring(0,2);
        var prefixo = telefone.Substring(2,4);
        var sufixo = telefone.Substring(6,4);
        return string.Format(&quot;({0}) {1}-{2}&quot;, ddd, prefixo, sufixo);
    }

    public static int ToDobro(this int valor)
    {
        return valor * 2;
    }
}

class Program
{
    static void Main(string[] args)
    {
        //string telefone = &quot;4334721597&quot;;
        //telefone = telefone.ToTelefoneFormat();

        //int valor = 10;
        //valor = valor.ToDobro();

        string telefone = &quot;4334721597&quot;.ToTelefoneFormat();
        int valor = 10.ToDobro();

        Console.WriteLine(telefone);
        Console.WriteLine(valor);
        Console.ReadKey();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;É possível ver também, no exemplo, que não precisamos declarar uma variável com o conteúdo para utilizar a extensão, desde que o tipo de dado seja respeitado como já dito anteriormente.&lt;/p&gt;

&lt;p&gt;Desta forma é possível utilizar a extensão do próprio dado, como no caso do telefone e do valor.&lt;/p&gt;

&lt;p&gt;Agora pare e imagine a infinidade de utilidades que podemos encontrar usando extensions. Poxa, tenho certeza que pode facilitar nossas vidas e tornar a escrita de código bem mais rápida.&lt;/p&gt;

&lt;p&gt;Você pode baixar o código fonte deste post &lt;a href=&quot;https://github.com/nilsonsrjunior/blog-projects/tree/master/Extensions&quot;&gt;aqui&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Faça seu comentário, um grande abraço, e até breve !!!&lt;/p&gt;
</description>
        <pubDate>Thu, 03 Dec 2015 20:35:00 -0200</pubDate>
        <link>http://nilsonsrjunior.net/extensions-aumentando-a-produtividade</link>
        <guid isPermaLink="true">http://nilsonsrjunior.net/extensions-aumentando-a-produtividade</guid>
        
        <category>csharp</category>
        
        
      </item>
    
      <item>
        <title>Enums - Dicas e Truques</title>
        <description>&lt;p&gt;Enums… você já usou esse cara ?&lt;/p&gt;

&lt;p&gt;Se &lt;strong&gt;sim&lt;/strong&gt;, dá uma olhada no post porque tem uns macetes bem legais que eu aprendi depois de algum tempo usando enums, e ajudaram pra caramba.&lt;/p&gt;

&lt;p&gt;Se &lt;strong&gt;não&lt;/strong&gt;, você &lt;strong&gt;precisa&lt;/strong&gt; ler este post até o fim, porque este recurso pode te ajudar bastante.&lt;/p&gt;

&lt;p&gt;Começando do começo &lt;strike&gt;(não, vamos começar do fim, tonto)&lt;/strike&gt;, o enum é a abreviação do que ele é, até mesmo no português, este cara é um enumerador e a função dele é facilitar sua vida quando você precisa declarar uma lista de itens (sejam eles quais forem) com seus respectivos identificadores, uma vez que forem constantes. Ficou difícil ? calma… vamos lá…&lt;/p&gt;

&lt;p&gt;Vamos supor que você tenha uma entidade (&lt;code&gt;classe&lt;/code&gt;, &lt;code&gt;struct&lt;/code&gt;, etc…) carro, e você tem um atributo chamado Combustivel. Você já sabe que seus tipos de combustíveis serão sempre: gasolina, álcool, flex ou diesel, e você quer armazenar esta constante em um lugar para não ter que ficar sempre trabalhando com string no seu código…&lt;/p&gt;

&lt;p&gt;Neste caso, poderíamos resolver este cara, assim:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class Program
{
    static void Main(string[] args)
    {
        //var carro = new Carro();
        //carro.Marca = &quot;Fiat&quot;;
        //carro.Modelo = &quot;Uno&quot;;
        //carro.Combustivel = Combustivel.Alcool;

        //Você sabia que essas duas formas de preencher um objeto
        //são iguais ne ? provavelmente sim, mas não custa dizer..
        var carro = new Carro()
        {
            Marca = &quot;Fiat&quot;,
            Modelo = &quot;Uno&quot;,
            Combustivel = Combustivel.Alcool
        };

        Console.ReadKey();
    }
}

public struct Carro
{
    public string Modelo { get; set; }
    public string Marca { get; set; }
    public Combustivel Combustivel { get; set; }
}

public enum Combustivel
{
    Gasolina = 0,        
    Alcool = 1,
    Flex = 2,
    Diesel = 3
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bom, agora temos o atributo combustível na entidade carro e podemos armazená-lo em algum arquivo ou banco de dados utilizando o numero inteiro que está identificando cada tipo de combustível.&lt;/p&gt;

&lt;p&gt;Aí você pode falar: tá, legal, &lt;strike&gt;valeu champs&lt;/strike&gt; mas e se eu quiser usar a descrição do combustível para apresentar em algum lugar?&lt;/p&gt;

&lt;p&gt;Se eu te falar que é só fazer assim: &lt;code&gt;carro.Combustivel.ToString();&lt;/code&gt; você não acredita… pois é, por exemplo, ali na situação do carro, esta linha de código nos retornaria “Alcool”.&lt;/p&gt;

&lt;p&gt;Mas calma, essa nossa conversa está bem didática, no seu dia a dia você pode passar por algumas &lt;strike&gt;tretas mais loucas&lt;/strike&gt; dificuldades usando enum. A seguir veja a classe TruquesDicasEnum onde implemento 3 &lt;strong&gt;truques&lt;/strong&gt; que podemos usar.&lt;/p&gt;

&lt;p&gt;Nos métodos desta classe, utilizamos um recurso chamado &lt;strong&gt;“extension”&lt;/strong&gt;, caso não tenha familiaridade com este recurso, ou queira aprender mais sobre ele, sugiro que leia este &lt;a href=&quot;http://nilsonsrjunior.net/extensions-aumentando-a-produtividade/&quot;&gt;post&lt;/a&gt; que eu fiz.&lt;/p&gt;

&lt;p&gt;Enfim, as classes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public static class TruquesDicasEnum
{
    public static string GetDescription(this Enum source)
    {
        FieldInfo fi = source.GetType().GetField(source.ToString());

        DescriptionAttribute[] attributes =
            (DescriptionAttribute[])fi.GetCustomAttributes(
            typeof(DescriptionAttribute), false);

        if (attributes != null &amp;amp;&amp;amp; attributes.Length &amp;gt; 0) return attributes[0].Description;
        else return source.ToString();
    }
    public static Enum FindByDescription&amp;lt;T&amp;gt;(this string description)
    {
        FieldInfo[] fi = typeof(T).GetFields();
        foreach (var item in fi)
        {
            var attributes =
                (DescriptionAttribute[])item.GetCustomAttributes(typeof(DescriptionAttribute), false);

            if (attributes.Any())
            {
                var field =
                    attributes.FirstOrDefault(x =&amp;gt; x.Description.Equals(description));

                if (field != null)
                {
                    return (Enum)Enum.Parse(typeof(T), item.Name);
                }
            }
        }
        return null;
    }
    public static IList&amp;lt;T&amp;gt; EnumToList&amp;lt;T&amp;gt;(this IEnumerable dados)
    {
        return Enum.GetValues(typeof(T)).Cast&amp;lt;T&amp;gt;().ToList();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Truque 1: Alterando a descrição do enum&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Vamos supor, que no nosso exemplo do combustível, queremos que a opção Alcool tenha acento quando formos utilizar a sua &lt;code&gt;string&lt;/code&gt;, como já vimos anteriormente.&lt;/p&gt;

&lt;p&gt;É bem fácil, basta decorarmos nossa opção Alcool com o atributo &lt;strong&gt;Description&lt;/strong&gt;. Encontramos este atributo usando a biblioteca &lt;code&gt;System.ComponentModel.Description&lt;/code&gt;. Veja o exemplo:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public enum Combustivel
{
    Gasolina = 0,
    [System.ComponentModel.Description(&quot;Álcool&quot;)]
    Alcool = 1,
    Flex = 2,
    Diesel = 3
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Uma vez referenciada a biblioteca e adicionado o atributo, é só passarmos como parâmetro para ele, a nossa nova descrição, com acento.&lt;/p&gt;

&lt;p&gt;Para exemplificarmos como iremos pegar essa nova descrição de maneira prática, vamos usar nosso primeiro método da classe de truques. O “&lt;code&gt;GetDescription()&lt;/code&gt;”, que fica desta forma:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;var novaDescricaoEnum = carro.Combustivel.GetDescription();&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;E como resultado teremos “Álcool”.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Truque 2: “Pegando” enum pela descrição&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Certa vez eu precisava selecionar qual era a opção de um enum para pegar o seu identificador inteiro, e tudo que eu tinha era a Description (mencionada acima) do enum.&lt;/p&gt;

&lt;p&gt;Após alguns fios de cabelo perdido e estudo sobre reflection, obtive o segundo método da classe de truques, “&lt;code&gt;FindByDescription&amp;lt;T&amp;gt;&lt;/code&gt;”. Veja como poderíamos usar ele no nosso exemplo:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;string descEnum = &quot;Álcool&quot;;
var enumPorDescricao = descEnum.FindByDescription&amp;lt;Combustivel&amp;gt;();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Viu só ? simples demais né… agora vamos ao último, mas não menos importante…&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Truque 3: Transformando um enum em uma coleção&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Imagine que você queira pegar todas as opções do nosso enum Combustível e retornar em uma coleção para preencher as options de um &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; da vida, por exemplo. Para fazermos isso, vamos ao terceiro e último método da nossa classe de truques, o “&lt;code&gt;EnumToList&amp;lt;T&amp;gt;&lt;/code&gt;”.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private IEnumerable&amp;lt;Combustivel&amp;gt; combustiveis;
public IEnumerable&amp;lt;Combustivel&amp;gt; Combustiveis
{
    get { return combustiveis ?? (combustiveis.EnumToList&amp;lt;Combustivel&amp;gt;()); }
    set { combustiveis = value; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Neste caso a situação foi a seguinte: eu precisava de uma propriedade, onde toda vez que eu fosse recuperá-la e ela estivesse nula (por isso os dois sinais de interrogação - ??) , eu retornaria todas as opções do enum em uma coleção. Show né ??.&lt;/p&gt;

&lt;p&gt;Espero muito que tenha te ajudado de alguma forma, nem que só um cadinho. Agradeço por ter lido até o fim, por enquanto é isso!.&lt;/p&gt;

&lt;p&gt;Você pode baixar o código fonte deste post &lt;a href=&quot;https://github.com/nilsonsrjunior/blog-projects/tree/master/TrabalhandoComEnums&quot;&gt;aqui&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Faça seu comentário, um grande abraço e até breve !!!&lt;/p&gt;
</description>
        <pubDate>Thu, 03 Dec 2015 20:25:00 -0200</pubDate>
        <link>http://nilsonsrjunior.net/enums-dicas-e-truques</link>
        <guid isPermaLink="true">http://nilsonsrjunior.net/enums-dicas-e-truques</guid>
        
        <category>csharp</category>
        
        
      </item>
    
      <item>
        <title>Yield ? É de comer ?</title>
        <description>&lt;p&gt;Primeira coisa…. não é de comer, mas não fique triste, você vai descobrir que é muito bom.&lt;/p&gt;

&lt;p&gt;Desde a versão 2.0 do C#, este camarada está lá. Mas afinal, o que é &lt;code&gt;yield&lt;/code&gt; e para que serve ?&lt;/p&gt;

&lt;p&gt;O &lt;code&gt;yield&lt;/code&gt; é um iterador, isto significa que ele te ajudar naqueles momentos em que precisa criar uma coleção/lista para determinado fim.&lt;/p&gt;

&lt;p&gt;Sabe aquela hora em que você declara uma lista só para preencher um campo e retorná-la ? Tipo assim:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public struct Pessoa
{
    public string Nome { get; set; }
    public string Email { get; set; }
}

public static IEnumerable&amp;lt;string&amp;gt; RetornaEmails(IEnumerable&amp;lt;Pessoa&amp;gt; pessoas)
{
    List&amp;lt;string&amp;gt; lista = new List&amp;lt;string&amp;gt;();
    foreach (Pessoa pessoa in pessoas)
    {
        if (!string.IsNullOrEmpty(pessoa.Email))
            lista.Add(pessoa.Email);
    }
    return lista;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No exemplo acima, a lógica é: se a pessoa possuir e-mail, eu a adiciono na lista para retornar. Agora olha só como podemos resolver a mesma situação, utilizando yield:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public struct Pessoa
{
    public string Nome { get; set; }
    public string Email { get; set; }
}

public static IEnumerable&amp;lt;string&amp;gt; RetornaEmails(IEnumerable&amp;lt;Pessoa&amp;gt; pessoas)
{
    List&amp;lt;string&amp;gt; lista = new List&amp;lt;string&amp;gt;();
    foreach (Pessoa pessoa in pessoas)
    {
        if (!string.IsNullOrEmpty(pessoa.Email))
            lista.Add(pessoa.Email);
    }
    return lista;
}

public static IEnumerable&amp;lt;string&amp;gt; RetornaEmailsUsandoYield(IEnumerable&amp;lt;Pessoa&amp;gt; pessoas)
{
    foreach (Pessoa pessoa in pessoas)
    {
        if (!string.IsNullOrEmpty(pessoa.Email))
            yield return pessoa.Email;
    }
    yield break;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Viu só ? não precisamos mais criar aquela lista, pode parecer um recurso não tão atraente, mas venhamos e convenhamos, ficar declarando lista só para ter algo pra preencher e retornar é uma coisa que dá nos nervos trabalho.&lt;/p&gt;

&lt;p&gt;E a performance disso, você pode estar se perguntando… bom, aqui vai um teste simples que eu fiz em um console application, para que você não fique em dúvidas:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Program
{
    static void Main(string[] args)
    {
        var pessoa = new Pessoa();

        var cronometro = new Stopwatch();
        cronometro.Start();
        IEnumerable&amp;lt;string&amp;gt; colecao = PopulaColecaoNormal(pessoa);
        cronometro.Stop();

        var tempoColecaoNormal = cronometro.Elapsed;
        cronometro.Reset();

        cronometro.Start();
        IEnumerable&amp;lt;string&amp;gt; colecaoYield = PopulaColecaoYield(pessoa);
        cronometro.Stop();

        var tempoColecaoYield = cronometro.Elapsed;

        Console.WriteLine(&quot;Tempo de execução para coleção: &quot; + tempoColecaoNormal);
        Console.Write(Environment.NewLine);
        Console.WriteLine(&quot;Tempo de execução para coleção yield: &quot; + tempoColecaoYield);
        Console.ReadKey();
    }
    public struct Pessoa
    {
        public string Nome { get; set; }
        public string Email { get; set; }
    }
    private static IEnumerable&amp;lt;string&amp;gt; PopulaColecaoNormal(Pessoa pessoa)
    {
        var lista = new List&amp;lt;string&amp;gt;();

        if (string.IsNullOrEmpty(pessoa.Nome))
            lista.Add(&quot;Nome é obrigatório&quot;);

        if (string.IsNullOrEmpty(pessoa.Email))
            lista.Add(&quot;Email é obrigatório&quot;);

        return lista;
    }
    private static IEnumerable&amp;lt;string&amp;gt; PopulaColecaoYield(Pessoa pessoa)
    {
        if (string.IsNullOrEmpty(pessoa.Nome))
            yield return &quot;Nome é obrigatório&quot;;

        if (string.IsNullOrEmpty(pessoa.Email))
            yield return &quot;Email é obrigatório&quot;;

        yield break;
    }       
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Como podem ver, nosso amigo yield se saiu vencedor na história. Espero que tenha conseguido te ajudar de alguma forma.&lt;/p&gt;

&lt;p&gt;Você pode baixar o código fonte deste post &lt;a href=&quot;https://github.com/nilsonsrjunior/blog-projects/tree/master/UtilizandoYield&quot;&gt;aqui&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Faça seu comentário, um grande abraço, e até breve !!!&lt;/p&gt;
</description>
        <pubDate>Thu, 03 Dec 2015 17:28:00 -0200</pubDate>
        <link>http://nilsonsrjunior.net/yield-e-de-comer</link>
        <guid isPermaLink="true">http://nilsonsrjunior.net/yield-e-de-comer</guid>
        
        <category>csharp</category>
        
        
      </item>
    
  </channel>
</rss>
